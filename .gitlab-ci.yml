image: quay.io/tike/alpine-oc-node

variables:
  npm_config_cache: "$CI_PROJECT_DIR/.npm"

# Define a hidden job to be used with extends
# Better than default to avoid activating cache for all jobs
.dependencies_cache:
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - .npm
    policy: pull

# Define the stages
stages:
  - setup
  - test
  - dependency-check
  - sonarqube-check
  - dependency-track-generate
  - dependency-track-submit
  - audit_scan
  - deploy

# Define the process for each stage

# Define the process for setup stage
setup:
  stage: setup
  tags:
    - ohtu-build-3
  script:
    - npm ci
  extends: .dependencies_cache
  cache:
    policy: pull-push
  artifacts:
    expire_in: 1h
    paths:
      - node_modules


# Define the process for test stage
test:
  stage: test
  services:
    - postgres:12.2-alpine
  variables:
    POSTGRES_DB: ${DATABASE}
    POSTGRES_USER: ${POSTGRES_USER}
    POSTGRES_PASSWORD: ${PASSWORD}
    POSTGRES_HOST_AUTH_METHOD: trust
  tags:
    - ohtu-build-3
  script:
    - npm run coverage
  coverage: /All files\s*\|\s*([\d\.]+)/
  artifacts:
    name: lataamo-poistamo-coverage
    paths:
      - coverage
    expire_in: 1 hour

sonarqube-check:
  stage: sonarqube-check
  tags:
    - ohtu-build-3
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [ "" ]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  only:
    - main
  needs:
    - job: dependency-check
      artifacts: true

dependency-check:
  stage: dependency-check
  only:
    - main
  tags:
    - ohtu-build-3
  image:
    name: owasp/dependency-check-action:latest
    entrypoint: [""]
  script:
    - >
      /usr/share/dependency-check/bin/dependency-check.sh
      --project unitube-poistamo --scan .
      --format JSON --format HTML -nvdApiKey $NVD_API_KEY
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - dependency-check-report.json
      - dependency-check-report.html

generate-sbom:
  stage: dependency-track-generate
  image: node:22-alpine
  only:
    - schedules
  tags:
    - ohtu-build-4
  script:
    - npm ci
    - npx @cyclonedx/cyclonedx-npm --output-file sbom.xml
  artifacts:
    expire_in: 1h
    paths:
      - sbom.xml

submit-sbom:
  image: alpine:latest
  stage: dependency-track-submit
  only:
    - schedules
  tags:
    - ohtu-build-4
  dependencies:
    - generate-sbom
  before_script:
    - apk add --no-cache curl
  script:
    - "curl -X POST ${DTRACK_API_URL} -H 'Content-Type: multipart/form-data' -H 'X-Api-Key: '${DTRACK_API_KEY} -F 'projectName='${PROJECT_NAME} -F 'autoCreate=true' -F 'projectVersion='${PROJECT_VERSION} -F 'bom=@sbom.xml'"


# Define the process for deploy stage to development environment
# Development environment uses https://webcast-test.it.helsinki.fi (OpenCast test environment)
deploy_dev:
  stage: deploy
  tags:
    - ohtu-build-3
  environment:
    name: development
  only:
    - main
  except:
    # Skip deploy when scheduled npm audit and outdated scans are executed.
    - schedules
  script:
    # set home path for openshift 1001 user
    - export HOME=/home/1001
    # before any action, I connect to the OpenShift server with the appropriate credentials
    - oc login https://$OPENSHIFT_ADDR_TEST:$OPENSHIFT_PORT --token=$OPENSHIFT_TOKEN_TEST
    - oc project poistamo
    # add secrets here
    - oc delete secret generic poistamo-dev-password --ignore-not-found
    - oc create secret generic poistamo-dev-password --from-literal=PASSWORD=$POISTAMO_DEV_PASSWORD
    - oc delete secret generic poistamo-opencast-dev-password --ignore-not-found
    - oc create secret generic poistamo-opencast-dev-password --from-literal=POISTAMO_OPENCAST_PASS=$POISTAMO_OPENCAST_PASS_DEV
    - oc delete secret generic poistamo-api-gw-key --ignore-not-found
    - oc create secret generic poistamo-api-gw-key --from-literal=IAM_GROUPS_API_KEY=$IAM_GROUPS_API_KEY_TEST
    # list environment variables here
    # postgres environment variables
    - oc set env --from=secret/poistamo-dev-password deploy/poistamo-dev
    - oc set env deploy/poistamo-dev OPENSHIFT_NODEJS_IP=$OPENSHIFT_NODEJS_IP
    - oc set env deploy/poistamo-dev OPENSHIFT_NODEJS_PORT=$OPENSHIFT_NODEJS_PORT
    - oc set env deploy/poistamo-dev POSTGRES_USER=$POISTAMO_DEV_USER_NAME
    - oc set env deploy/poistamo-dev PORT=$POISTAMO_DEV_PORT
    - oc set env deploy/poistamo-dev HOST=$POISTAMO_DEV_HOST
    - oc set env deploy/poistamo-dev DATABASE=$POISTAMO_DEV_DATABASE
    - oc set env deploy/poistamo-dev SSL=$POISTAMO_DEV_SSL
    - oc set env deploy/poistamo-dev TZ="Europe/Helsinki"
    # opencast environment variables
    - oc set env --from=secret/poistamo-opencast-dev-password deploy/poistamo-dev
    - oc set env deploy/poistamo-dev POISTAMO_OPENCAST_USER=$POISTAMO_OPENCAST_USER_DEV
    - oc set env deploy/poistamo-dev POISTAMO_OPENCAST_HOST=$POISTAMO_OPENCAST_HOST_DEV
    - oc set env deploy/poistamo-dev POISTAMO_OPENCAST_ARCHIVED_SERIES=$POISTAMO_OPENCAST_ARCHIVED_SERIES_DEV
    # api-gateway environment variables
    - oc set env deploy/poistamo-dev IAM_GROUPS_HOST=$IAM_GROUPS_HOST_TEST
    - oc set env --from=secret/poistamo-api-gw-key deploy/poistamo-dev
    # cronjob variable
    - oc set env deploy/poistamo-dev CRON_START_TIME="30 0 * * *"
    - oc set env deploy/poistamo-dev CRON_START_TIME_REMOVE_USERS="0 3 * * SUN"
    # start build process in OpenShift
    - oc start-build poistamo-dev --from-dir=. --follow
    # patch openshift buildConfig file
    - oc patch bc/poistamo-dev --patch '{"spec":{"successfulBuildsHistoryLimit":1}}'
    - oc patch bc/poistamo-dev --patch '{"spec":{"failedBuildsHistoryLimit":1}}'

# Test environment uses https://webcast-dev.it.helsinki.fi (OpenCast devel environment, used for Version Switching)
deploy_test:
  stage: deploy
  tags:
    - ohtu-build-3
  except:
    # Skip deploy when scheduled npm audit and outdated scans are executed.
    - schedules
  environment:
    name: test
  only:
    - test
  script:
    # set home path for openshift 1001 user
    - export HOME=/home/1001
    # before any action, I connect to the OpenShift server with the appropriate credentials
    - oc login https://$OPENSHIFT_ADDR_TEST:$OPENSHIFT_PORT --token=$OPENSHIFT_TOKEN_TEST
    - oc project poistamo
    # add secrets here
    - oc delete secret generic poistamo-test-password --ignore-not-found
    - oc create secret generic poistamo-test-password --from-literal=PASSWORD=$POISTAMO_TEST_PASSWORD
    - oc delete secret generic poistamo-opencast-test-password --ignore-not-found
    - oc create secret generic poistamo-opencast-test-password --from-literal=POISTAMO_OPENCAST_PASS=$POISTAMO_OPENCAST_PASS_TEST
    - oc delete secret generic poistamo-api-gw-key --ignore-not-found
    - oc create secret generic poistamo-api-gw-key --from-literal=IAM_GROUPS_API_KEY=$IAM_GROUPS_API_KEY_TEST
    # list environment variables here
    - oc set env --from=secret/poistamo-test-password deploy/poistamo-test
    - oc set env deploy/poistamo-test OPENSHIFT_NODEJS_IP=$OPENSHIFT_NODEJS_IP
    - oc set env deploy/poistamo-test OPENSHIFT_NODEJS_PORT=$OPENSHIFT_NODEJS_PORT
    - oc set env deploy/poistamo-test POSTGRES_USER=$POISTAMO_TEST_USER_NAME
    - oc set env deploy/poistamo-test PORT=$POISTAMO_TEST_PORT
    - oc set env deploy/poistamo-test HOST=$POISTAMO_TEST_HOST
    - oc set env deploy/poistamo-test DATABASE=$POISTAMO_TEST_DATABASE
    - oc set env deploy/poistamo-test SSL=$POISTAMO_TEST_SSL
    - oc set env deploy/poistamo-test TZ="Europe/Helsinki"
    # opencast environment variables
    - oc set env --from=secret/poistamo-opencast-test-password deploy/poistamo-test
    - oc set env deploy/poistamo-test POISTAMO_OPENCAST_USER=$POISTAMO_OPENCAST_USER_TEST
    - oc set env deploy/poistamo-test POISTAMO_OPENCAST_HOST=$POISTAMO_OPENCAST_HOST_TEST
    - oc set env deploy/poistamo-test POISTAMO_OPENCAST_ARCHIVED_SERIES=$POISTAMO_OPENCAST_ARCHIVED_SERIES_TEST
    # api-gateway environment variables
    - oc set env deploy/poistamo-test IAM_GROUPS_HOST=$IAM_GROUPS_HOST_TEST
    - oc set env --from=secret/poistamo-api-gw-key deploy/poistamo-test
    # cronjob variable
    - oc set env deploy/poistamo-test CRON_START_TIME="30 0 * * *"
    - oc set env deploy/poistamo-test CRON_START_TIME_REMOVE_USERS="0 3 * * SUN"
    - oc start-build poistamo-test --from-dir=. --follow
    # patch openshift buildConfig file
    - oc patch bc/poistamo-test --patch '{"spec":{"successfulBuildsHistoryLimit":1}}'
    - oc patch bc/poistamo-test --patch '{"spec":{"failedBuildsHistoryLimit":1}}'

deploy_prod:
  stage: deploy
  tags:
    - ohtu-build-3
  except:
    # Skip deploy when scheduled npm audit and outdated scans are executed.
    - schedules
  environment:
    name: prod
  only:
    - prod
  when: manual
  script:
    # set home path for openshift 1001 user
    - export HOME=/home/1001
    # before any action, I connect to the OpenShift server with the appropriate credentials
    - oc login https://$OPENSHIFT_ADDR_PROD:$OPENSHIFT_PORT --token=$OPENSHIFT_TOKEN_PROD
    - oc project poistamo
    # add secrets here
    - oc delete secret generic poistamo-prod-password --ignore-not-found
    - oc create secret generic poistamo-prod-password --from-literal=PASSWORD=$POISTAMO_PROD_PASSWORD
    - oc delete secret generic poistamo-opencast-prod-password --ignore-not-found
    - oc create secret generic poistamo-opencast-prod-password --from-literal=POISTAMO_OPENCAST_PASS=$POISTAMO_OPENCAST_PASS_PROD
    - oc delete secret generic poistamo-api-gw-key --ignore-not-found
    - oc create secret generic poistamo-api-gw-key --from-literal=IAM_GROUPS_API_KEY=$IAM_GROUPS_API_KEY_PROD
    # list any environment variables here
    - oc set env --from=secret/poistamo-prod-password deploy/poistamo-prod
    - oc set env deploy/poistamo-prod OPENSHIFT_NODEJS_IP=$OPENSHIFT_NODEJS_IP
    - oc set env deploy/poistamo-prod OPENSHIFT_NODEJS_PORT=$OPENSHIFT_NODEJS_PORT
    - oc set env deploy/poistamo-prod POSTGRES_USER=$POISTAMO_PROD_USER_NAME
    - oc set env deploy/poistamo-prod PORT=$POISTAMO_PROD_PORT
    - oc set env deploy/poistamo-prod HOST=$POISTAMO_PROD_HOST
    - oc set env deploy/poistamo-prod DATABASE=$POISTAMO_PROD_DATABASE
    - oc set env deploy/poistamo-prod SSL=$POISTAMO_PROD_SSL
    - oc set env deploy/poistamo-prod TZ="Europe/Helsinki"
    # opencast environment variables
    - oc set env --from=secret/poistamo-opencast-prod-password deploy/poistamo-prod
    - oc set env deploy/poistamo-prod POISTAMO_OPENCAST_USER=$POISTAMO_OPENCAST_USER_PROD
    - oc set env deploy/poistamo-prod POISTAMO_OPENCAST_HOST=$POISTAMO_OPENCAST_HOST_PROD
    - oc set env deploy/poistamo-prod POISTAMO_OPENCAST_ARCHIVED_SERIES=$POISTAMO_OPENCAST_ARCHIVED_SERIES_PROD
    # api-gateway environment variables
    - oc set env deploy/poistamo-prod IAM_GROUPS_HOST=$IAM_GROUPS_HOST_PROD
    - oc set env --from=secret/poistamo-api-gw-key deploy/poistamo-prod
    # cronjob variable
    - oc set env deploy/poistamo-prod CRON_START_TIME="30 0 * * *"
    - oc set env deploy/poistamo-prod CRON_START_TIME_REMOVE_USERS="0 3 * * SUN"
    - oc start-build poistamo-prod --from-dir=. --follow
    # patch openshift buildConfig file
    - oc patch bc/poistamo-prod --patch '{"spec":{"successfulBuildsHistoryLimit":1}}'
    - oc patch bc/poistamo-prod --patch '{"spec":{"failedBuildsHistoryLimit":1}}'


deploy_periodically_prod:
  stage: deploy
  tags:
    - ohtu-build-3
  environment:
    name: prod
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "prod"'
      when: always
    - when: never
  script:
    # set home path for openshift 1001 user
    - export HOME=/home/1001
    # before any action, I connect to the OpenShift server with the appropriate credentials
    - oc login https://$OPENSHIFT_ADDR_PROD:$OPENSHIFT_PORT --token=$OPENSHIFT_TOKEN_PROD
    - oc project poistamo
    # add secrets here
    - oc delete secret generic poistamo-prod-password --ignore-not-found
    - oc create secret generic poistamo-prod-password --from-literal=PASSWORD=$POISTAMO_PROD_PASSWORD
    - oc delete secret generic poistamo-opencast-prod-password --ignore-not-found
    - oc create secret generic poistamo-opencast-prod-password --from-literal=POISTAMO_OPENCAST_PASS=$POISTAMO_OPENCAST_PASS_PROD
    - oc delete secret generic poistamo-api-gw-key --ignore-not-found
    - oc create secret generic poistamo-api-gw-key --from-literal=IAM_GROUPS_API_KEY=$IAM_GROUPS_API_KEY_PROD
    # list any environment variables here
    - oc set env --from=secret/poistamo-prod-password deploy/poistamo-prod
    - oc set env deploy/poistamo-prod OPENSHIFT_NODEJS_IP=$OPENSHIFT_NODEJS_IP
    - oc set env deploy/poistamo-prod OPENSHIFT_NODEJS_PORT=$OPENSHIFT_NODEJS_PORT
    - oc set env deploy/poistamo-prod POSTGRES_USER=$POISTAMO_PROD_USER_NAME
    - oc set env deploy/poistamo-prod PORT=$POISTAMO_PROD_PORT
    - oc set env deploy/poistamo-prod HOST=$POISTAMO_PROD_HOST
    - oc set env deploy/poistamo-prod DATABASE=$POISTAMO_PROD_DATABASE
    - oc set env deploy/poistamo-prod SSL=$POISTAMO_PROD_SSL
    - oc set env deploy/poistamo-prod TZ="Europe/Helsinki"
    # opencast environment variables
    - oc set env --from=secret/poistamo-opencast-prod-password deploy/poistamo-prod
    - oc set env deploy/poistamo-prod POISTAMO_OPENCAST_USER=$POISTAMO_OPENCAST_USER_PROD
    - oc set env deploy/poistamo-prod POISTAMO_OPENCAST_HOST=$POISTAMO_OPENCAST_HOST_PROD
    - oc set env deploy/poistamo-prod POISTAMO_OPENCAST_ARCHIVED_SERIES=$POISTAMO_OPENCAST_ARCHIVED_SERIES_PROD
    # api-gateway environment variables
    - oc set env deploy/poistamo-prod IAM_GROUPS_HOST=$IAM_GROUPS_HOST_PROD
    - oc set env --from=secret/poistamo-api-gw-key deploy/poistamo-prod
    # cronjob variable
    - oc set env deploy/poistamo-prod CRON_START_TIME="30 0 * * *"
    - oc set env deploy/poistamo-prod CRON_START_TIME_REMOVE_USERS="0 3 * * SUN"
    - oc start-build poistamo-prod --from-dir=. --follow
    # patch openshift buildConfig file
    - oc patch bc/poistamo-prod --patch '{"spec":{"successfulBuildsHistoryLimit":1}}'
    - oc patch bc/poistamo-prod --patch '{"spec":{"failedBuildsHistoryLimit":1}}'

# Rules for the scheduled npm audit and outdated scans
dependency scanning:
  stage: audit_scan
  tags:
    - ohtu-build-3
  allow_failure: true
  only:
    - schedules
  script:
    # Run npm audit and npm outdated commands and write outputs to a txt file.
    - echo "Running npm diagnostics, audit and outdated..."
    - export RESULT_FILE="./npm_scan_results.txt"
    # Create result file
    - touch $RESULT_FILE
    # Write to the result file
    - echo " ************ POISTAMO NPM AUDIT RESULT ************ " >> $RESULT_FILE
    - echo "https://version.helsinki.fi/tike-ohtu/unitube-poistamo" >> $RESULT_FILE
    - echo "" >> $RESULT_FILE
    - echo "=== npm audit security report ===" >> $RESULT_FILE
    - echo "" >> $RESULT_FILE
    # Run npm audit and "catch" the possible non zero exit code (https://docs.gitlab.com/ee/ci/yaml/#script)
    - "npm ci  >> $RESULT_FILE || exit_code=$?"
    # npm audit --parseable | awk -F $'\t' 'NF {print "   Package: "$2, "\tLevel: "$3, "\tMore info: "$6}' # this would be nice format
    # Add a message based on npm audit's return code
    - if [ $exit_code -ne 0 ]; then echo "Some vulnerabilities was found, check the above packages." >> $RESULT_FILE; fi;
    - if [ $exit_code -eq 0 ]; then echo "All is good, enjoy the moment." >> $RESULT_FILE; fi;
    - echo "" >> $RESULT_FILE
    - echo " ************ POISTAMO NPM OUTDATED RESULT ************ " >> $RESULT_FILE
    - echo "" >> $RESULT_FILE
    - echo "=== npm outdated report ===" >> $RESULT_FILE
    - echo "" >> $RESULT_FILE
    # Run npm outdated and "catch" the possible non zero exit code (https://docs.gitlab.com/ee/ci/yaml/#script)
    - npm outdated >> $RESULT_FILE || exit_code=$?
    - echo "" >> $RESULT_FILE
    - echo " ************ END OF FILE ************ " >> $RESULT_FILE
    - cat $RESULT_FILE
    - echo "Done with npm diagnostics."
    - echo "Sending results to Slack..."
    # Send result file to "audit-logs" channel in Ohtu's Slack space (see https://api.slack.com/methods/files.upload).
    - "curl -F file=@${CI_PROJECT_DIR}/$RESULT_FILE -F 'initial_comment=Poistamo npm report' -F channels=${AUDIT_RESULT_SLACK_CHANNEL_ID} -F filename=$RESULT_FILE -F filetype=text -H 'Authorization: Bearer '${SLACK_FILE_UPLOAD_TOKEN} https://slack.com/api/files.upload"
    - echo "Done with sending results to Slack."
